<script id="page-9" title="Backbone Views" type="text/haml-template">
%pre(class="sh_javascript")
  !window.TodoView = Backbone.View.extend({
  !
  !  tagName:  "li",
  !
  !  // Cache the template function for a single item.
  !  template: _.template($('#item-template').html()),
  !
  !  // The DOM events specific to an item.
  !  events: {
  !    "click .check"              : "toggleDone",
  !    "dblclick div.todo-content" : "edit",
  !    "click span.todo-destroy"   : "clear",
  !    "keypress .todo-input"      : "updateOnEnter"
  !  },
  !
  !  // The TodoView listens for changes to its model, re-rendering. Since there's
  !  // a one-to-one correspondence between a **Todo** and a **TodoView** in this
  !  // app, we set a direct reference on the model for convenience.
  !  initialize: function() {
  !    _.bindAll(this, 'render', 'close');
  !    this.model.bind('change', this.render);
  !    this.model.view = this;
  !  },
%script(type="text/javascript")
  sh_highlightDocument();
</script>

<script id="page-9-1" type="text/haml-template">
%pre(class="sh_javascript")
  !  // The DOM events specific to an item.
  !  events: {
  !    "click .check"              : "toggleDone",
  !    "dblclick div.todo-content" : "edit",
  !    "click span.todo-destroy"   : "clear",
  !    "keypress .todo-input"      : "updateOnEnter"
  !  },
  !
  !  // The TodoView listens for changes to its model, re-rendering. Since there's
  !  // a one-to-one correspondence between a **Todo** and a **TodoView** in this
  !  // app, we set a direct reference on the model for convenience.
  !  initialize: function() {
  !    _.bindAll(this, 'render', 'close');
  !    this.model.bind('change', this.render);
  !    this.model.view = this;
  !  },
  !
  !  // Re-render the contents of the todo item.
  !  render: function() {
  !    $(this.el).html(this.template(this.model.toJSON()));
  !    this.setContent();
  !    return this;
  !  },
%script(type="text/javascript")
  sh_highlightDocument();
</script>

<script id="page-9-2" type="text/haml-template">
%pre(class="sh_javascript")
  !  // The TodoView listens for changes to its model, re-rendering. Since there's
  !  // a one-to-one correspondence between a **Todo** and a **TodoView** in this
  !  // app, we set a direct reference on the model for convenience.
  !  initialize: function() {
  !    _.bindAll(this, 'render', 'close');
  !    this.model.bind('change', this.render);
  !    this.model.view = this;
  !  },
  !
  !  // Re-render the contents of the todo item.
  !  render: function() {
  !    $(this.el).html(this.template(this.model.toJSON()));
  !    this.setContent();
  !    return this;
  !  },
  !
  !  // To avoid XSS (not that it would be harmful in this particular app),
  !  // we use `jQuery.text` to set the contents of the todo item.
  !  setContent: function() {
  !    var content = this.model.get('content');
  !    this.$('.todo-content').text(content);
  !    this.input = this.$('.todo-input');
  !    this.input.bind('blur', this.close);
  !    this.input.val(content);
  !  },
%script(type="text/javascript")
  sh_highlightDocument();
</script>

<script id="page-9-3" type="text/haml-template">
%pre(class="sh_javascript")
  !// Our overall **AppView** is the top-level piece of UI.
  !window.AppView = Backbone.View.extend({
  !
  !  // Instead of generating a new element, bind to the existing skeleton of
  !  // the App already present in the HTML.
  !  el: $("#todoapp"),
  !
  !  // Our template for the line of statistics at the bottom of the app.
  !  statsTemplate: _.template($('#stats-template').html()),
  !
  !  // Delegated events for creating new items, and clearing completed ones.
  !  events: {
  !    "keypress #new-todo":  "createOnEnter",
  !    "keyup #new-todo":     "showTooltip",
  !    "click .todo-clear a": "clearCompleted"
  !  },
  !
  !  // At initialization we bind to the relevant events on the `Todos`
  !  // collection, when items are added or changed. Kick things off by
  !  // loading any preexisting todos that might be saved in *localStorage*.
  !  initialize: function() {
  !    _.bindAll(this, 'addOne', 'addAll', 'render');
  !
  !    this.input    = this.$("#new-todo");
  !
  %script(type="text/javascript")
    sh_highlightDocument();
  </script>

<script id="page-9-4" type="text/haml-template">
%pre(class="sh_javascript")
  !  // At initialization we bind to the relevant events on the `Todos`
  !  // collection, when items are added or changed. Kick things off by
  !  // loading any preexisting todos that might be saved in *localStorage*.
  !  initialize: function() {
  !    _.bindAll(this, 'addOne', 'addAll', 'render');
  !
  !    this.input    = this.$("#new-todo");
  !
  !    Todos.bind('add',     this.addOne);
  !    Todos.bind('refresh', this.addAll);
  !    Todos.bind('all',     this.render);
  !
  !    Todos.fetch();
  !  },
  !
  !  // Re-rendering the App just means refreshing the statistics -- the rest
  !  // of the app doesn't change.
  !  render: function() {
  !    var done = Todos.done().length;
  !    this.$('#todo-stats').html(this.statsTemplate({
  !      total:      Todos.length,
  !      done:       Todos.done().length,
  !      remaining:  Todos.remaining().length
  !    }));
  !  },
  %script(type="text/javascript")
    sh_highlightDocument();
  </script>

<script id="page-9-5" type="text/haml-template">
%pre(class="sh_javascript")
  !  // Re-rendering the App just means refreshing the statistics -- the rest
  !  // of the app doesn't change.
  !  render: function() {
  !    var done = Todos.done().length;
  !    this.$('#todo-stats').html(this.statsTemplate({
  !      total:      Todos.length,
  !      done:       Todos.done().length,
  !      remaining:  Todos.remaining().length
  !    }));
  !  },
  !
  !  // Add a single todo item to the list by creating a view for it, and
  !  // appending its element to the `&lt;ul&gt;`.
  !  addOne: function(todo) {
  !    var view = new TodoView({model: todo});
  !    this.$("#todo-list").append(view.render().el);
  !  },
  !
  !  // Add all items in the **Todos** collection at once.
  !  addAll: function() {
  !    Todos.each(this.addOne);
  !  },
  %script(type="text/javascript")
    sh_highlightDocument();
  </script>

<script id="page-9-6" type="text/haml-template">
%pre(class="sh_javascript")
  !  // Generate the attributes for a new Todo item.
  !  newAttributes: function() {
  !    return {
  !      content: this.input.val(),
  !      order:   Todos.nextOrder(),
  !      done:    false
  !    };
  !  },
  !
  !  // If you hit return in the main input field, create new **Todo** model,
  !  // persisting it to *localStorage*.
  !  createOnEnter: function(e) {
  !    if (e.keyCode != 13) return;
  !    Todos.create(this.newAttributes());
  !    this.input.val('');
  !  },
  !
  !  // Clear all done todo items, destroying their models.
  !  clearCompleted: function() {
  !    _.each(Todos.done(), function(todo){ todo.clear(); });
  !    return false;
  !  },
  %script(type="text/javascript")
    sh_highlightDocument();
  </script>
